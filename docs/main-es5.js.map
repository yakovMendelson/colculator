{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/coms/historis/historis.component.ts","webpack:///src/app/coms/historis/historis.component.html","webpack:///src/app/coms/inputs/inputs.component.ts","webpack:///src/app/coms/inputs/inputs.component.html","webpack:///src/app/services/serv.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","HistorisComponent","serv","InputsComponent","resultA","resultB","oper","myInpu","nativeElement","value","temp","num","n","parseInt","length","eval","his","arr","history","push","inp","col","equal","ServService","providedIn","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'colculator';\n}\n","<app-inputs></app-inputs>\n<app-historis></app-historis>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { InputsComponent } from './coms/inputs/inputs.component';\nimport { HistorisComponent } from './coms/historis/historis.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    InputsComponent,\n    HistorisComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { ServService } from 'src/app/services/serv.service';\n\n@Component({\n  selector: 'app-historis',\n  templateUrl: './historis.component.html',\n  styleUrls: ['./historis.component.css']\n})\nexport class HistorisComponent implements OnInit {\n\n  constructor(public serv:ServService) { }\n\n  ngOnInit(): void {\n  }\n\n}\n\n","<ul>\r\n    <li>RESULT</li>\r\n    <li *ngFor='let x of serv.arr'>{{x}}</li>\r\n</ul>\r\n<ul>\r\n    <li>HISTORY</li>\r\n    <div *ngFor='let x of serv.history'>\r\n        <br>\r\n        <br>\r\n        <span>--------------</span>\r\n        <li *ngFor='let i of x'>{{i}}\r\n        </li>\r\n        <span>--------------</span>\r\n    </div>\r\n</ul>","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { ServService } from 'src/app/services/serv.service';\n\n@Component({\n  selector: 'app-inputs',\n  templateUrl: './inputs.component.html',\n  styleUrls: ['./inputs.component.css']\n})\nexport class InputsComponent implements OnInit {\n  constructor(private serv:ServService) {}\n  num1:string\n  resultA:string =''\n  resultB:string =''\n  temp:string\n  his:string\n  @ViewChild('myInput') myInpu : ElementRef\n  col(oper):void{\n      this.myInpu.nativeElement.value=this.temp+oper\n   }\n    inp(num){\n      this.temp=num.value;\n      let n=parseInt(num.value[this.temp.length-1]);\n      \n      if(n)\n      this.resultA=eval(num.value);\n      this.resultB=num.value;\n      this.his=this.resultB+'='+this.resultA\n    }\n    history(){\n      if(this.serv.arr.length>0){\n      this.serv.history.push(this.serv.arr) \n      this.serv.arr=[]\n      }\n    \n      \n    }\n    equal(){\n      this.serv.arr.push(this.his)\n      this.myInpu.nativeElement.value=''\n    }\n  ngOnInit(): void {\n  }\n}","<div class=\"contanerAll\">\n    <input #myInput (input)='inp(myInput)' />\n    <div class=\"operators\">\n        <button #oper1 (click)='col(oper1.innerText)'>+</button>\n        <button #oper2 (click)='col(oper2.innerText)'>-</button>\n        <button #oper3 (click)='col(oper3.innerText)'>/</button>\n        <button #oper4 (click)='col(oper4.innerText)'>*</button>\n    </div>\n</div>\n<li #re>{{resultB}}</li>\n<button id='history' (click)='history()'>H</button>\n<button id='equal' (click)='equal()'>=</button>\n\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServService {\n\n  constructor() { }\n\n  arr:string[]=[]\n  history:string[][]=[]\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}